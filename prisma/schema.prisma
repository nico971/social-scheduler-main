generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                    String    @id @default(cuid())
  name                  String?
  email                 String?   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  passwordResetToken    String?   @unique
  passwordResetTokenExp DateTime?
  accounts              Account[]
  Member                Member[]
  sessions              Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Member {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id         String?       @db.VarChar(255)
  organisation_id String?       @db.Uuid
  role_id         String?       @db.Uuid
  joined_at       DateTime?     @default(now()) @db.Timestamptz(6)
  Organisation    Organisation? @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Role            Role?         @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User            User?         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  TeamMember      TeamMember[]
}

model Organisation {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String    @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  updated_at DateTime? @default(now()) @db.Timestamptz(6)
  Member     Member[]
  Team       Team[]
}

model Role {
  id     String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String   @db.VarChar(50)
  Member Member[]
}

model Team {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  organisation_id String?       @db.Uuid
  name            String        @db.VarChar(255)
  created_at      DateTime?     @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?     @default(now()) @db.Timestamptz(6)
  Organisation    Organisation? @relation(fields: [organisation_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  TeamMember      TeamMember[]
}

model TeamMember {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  member_id String?   @db.Uuid
  team_id   String?   @db.Uuid
  joined_at DateTime? @default(now()) @db.Timestamptz(6)
  Member    Member?   @relation(fields: [member_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  Team      Team?     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
